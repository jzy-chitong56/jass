globals

    //通用AI全局变量

    // 开局基础战术标识，默认为开，兵力未达规模前都按此战术进行训练和建造，达标后才关闭
    //人族不升本就是该跳出模式要求过于严苛
    constant boolean basic_opening       = true

    //首英雄存在标识，当首英雄数量大于0时为真
    constant boolean b_hero1_done        = false
    //二发英雄存在标识，当二发英雄数量大于0时为真
    constant boolean b_hero2_done        = false
    //三发英雄存在标识，当三发英雄数量大于0时为真
    constant boolean b_hero3_done        = false
    //当前祭坛数量
    constant integer c_altar_done        = 0
    //当前可用人口数，统计所有主城及人口建筑提供的人口数，含建造中
    constant integer c_food_made         = 0
    //当前已使用人口数
    constant integer c_food_used         = 0
    //当前黄金数
    constant integer c_gold              = 0
    //当前拥有金矿的未采集金钱数
    constant integer c_gold_owned        = 0
    //当前首英雄数量，不含训练/复活中
    constant integer c_hero1_done        = 0
    //当前二发英雄数量，不含训练/复活中
    constant integer c_hero2_done        = 0
    //当前三发英雄数量，不含训练/复活中
    constant integer c_hero3_done        = 0
    //当前拥有金矿数
    constant integer c_mines             = 0
    //当前拥有飞艇数量
    constant integer c_zep               = 0

    //攻击波次，用于控制AI攻击节奏，会自动循环赋值
    //AI编辑器导出AI脚本的变量
    constant integer attackWave          = 1
    //下次攻击延迟
    //AI编辑器导出AI脚本的变量
    constant integer nextDelay           = 0
    //参与攻击的采金工人数量
    //AI编辑器导出AI脚本的变量
    constant integer awGold              = 0
    //参与攻击的采木工人数量
    //AI编辑器导出AI脚本的变量
    constant integer awWood              = 0
    //当前触发器发送的命令
    //AI编辑器导出AI脚本及部分官方战役AI脚本的变量
    constant integer command
    //当前触发器发送命令的数据
    //AI编辑器导出AI脚本及部分官方战役AI脚本的变量
    constant integer command_data

    //启动标识
    //混乱之治AI脚本独占标识，意义不明，亡灵无此标识
    constant boolean startup     = true

    //暗夜及亡灵攻击波次
    //暗夜在冰封王座AI脚本使用，亡灵在混乱之治AI脚本使用
    constant integer wave                = 0

    //科技等级
    //部分官方战役AI脚本的变量
    constant integer upg_level = 1
    //种族类型标识 人族，默认值1
    //用于区分建造人口建筑的类型及攻击组的种族
    //部分官方战役AI脚本的变量
    constant integer SIDE_HUMAN = 1
    //种族类型标识 兽族，默认值2
    //用于区分建造人口建筑的类型及攻击组的种族
    //部分官方战役AI脚本的变量
    constant integer SIDE_ORC   = 2
    //种族类型标识 当前标识
    //用于区分建造人口建筑的类型及攻击组的种族
    //部分官方战役AI脚本的变量
    constant integer side
    //进攻间隔时间，用于简单及普通难度，默认5分钟
    //部分官方战役AI脚本的变量
    constant integer delay       = M5          // normal & easy delay
    //进攻间隔时间，用于困难难度，默认4分钟
    //部分官方战役AI脚本的变量
    constant integer hard_delay  = M4          // hard delay
    //进攻间隔时间，用于困难且接受到开局信号后难度，默认3分钟
    //部分官方战役AI脚本的变量
    constant integer fast_delay  = M3          // hard delay after final signal
    //X 坐标，记录触发器发送的点 X 坐标
    //部分官方战役AI脚本的变量
    constant integer SET_X = 1
    //Y 坐标，记录触发器发送的点 Y 坐标
    //部分官方战役AI脚本的变量
    constant integer SET_Y = 2
    //玩家变量
    //用于记录战役的真人玩家，以便AI精准攻击敌人（防止战役给玩家设置了AI盟友）
    //部分官方战役AI脚本的变量
    constant player user = null
    //玩家变量
    //用于记录战役的真人玩家，以便AI精准攻击敌人（防止战役给玩家设置了AI盟友）
    //部分官方战役AI脚本的变量
    constant player USER = null
    //玩家变量
    //用于记录战役的真人玩家，以便AI精准攻击敌人（防止战役给玩家设置了AI盟友）
    //部分官方战役AI脚本的变量
    constant player User = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player ZOMBIES = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player orcs = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player humans = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player elf = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player undead = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player jaina = null
    //玩家变量
    //用于记录战役的其他AI玩家，以便AI精准攻击敌人
    //部分官方战役AI脚本的变量
    constant player kel = null
    //玩家变量
    //用于记录战役的真人玩家，以便AI精准攻击敌人（防止战役给玩家设置了AI盟友）
    //部分官方战役AI脚本的变量
    constant player attacked = null
    //作弊启用标识
    //部分官方战役AI脚本的变量
    constant boolean debug_fast_attacks = true
    //攻击状态 执行暴力攻击
    //部分官方战役AI脚本的变量
    constant integer GO_AGRO        = 1     //                      no data
    //攻击状态 攻击目标
    //部分官方战役AI脚本的变量
    constant integer GO_KILL        = 2     //                      no data
    //攻击状态 敌方玩家已被击败
    //部分官方战役AI脚本的变量
    constant integer PLAYER_DIED    = 3     // data = player ID
    //攻击状态 敌方玩家未受到攻击
    //部分官方战役AI脚本的变量
    constant integer PLAYER_ASS     = 4     //                      no data
    //攻击状态 取消暴力攻击
    //部分官方战役AI脚本的变量
    constant integer CLEAR_AGRO     = 5     // data = player ID
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant integer USER           = 0
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant integer BLUE           = 1
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant integer GRAY           = 8
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant integer LIGHT_BLUE     = 9
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant integer GREEN          = 10
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant player purple          = null
    //玩家标识，用于标记敌方玩家
    //部分官方战役AI脚本的变量
    constant player green          = null
    //玩家标识，用于标记敌方玩家的编号
    //部分官方战役AI脚本的变量
    constant integer ILLIDAN_SLOT   = 11
    //玩家标识，用于标记AI自己的玩家编号
    //部分官方战役AI脚本的变量
    constant integer slot                    = 0
    //允许建造标识
    //部分官方战役AI脚本的变量
    constant boolean gate_open               = false
    //允许自杀攻击标识
    //部分官方战役AI脚本的变量
    constant boolean suicide_off             = true
    //自杀攻击组数组
    //部分官方战役AI脚本的变量
    constant integer array suicide_list
    //自杀攻击组数组下标
    //部分官方战役AI脚本的变量
    constant integer next_suicide            = 0
    //自杀攻击组数组下标
    //部分官方战役AI脚本的变量
    constant integer next_declare            = 0
    //暴力攻击强度标识 简单（与进入战役时选的难度挂钩）
    //部分官方战役AI脚本的变量
    constant integer EASY_AGRO      = 120
    //暴力攻击强度标识 普通（与进入战役时选的难度挂钩）
    //部分官方战役AI脚本的变量
    constant integer NORMAL_AGRO    = 120
    //暴力攻击强度标识 困难（与进入战役时选的难度挂钩）
    //部分官方战役AI脚本的变量
    constant integer HARD_AGRO      = 120
    //暴力攻击目标玩家的编号
    //部分官方战役AI脚本的变量
    constant integer grom_target             = -1
    //攻击波次
    //部分官方战役AI脚本的变量
    constant integer wave_index              = 0
    //攻击强度
    //部分官方战役AI脚本的变量
    constant integer strength                = 1
    //暴力攻击模式启用标识，默认为真
    //部分官方战役AI脚本的变量
    constant boolean agro_mode               = true
    //玩家存活标识
    //部分官方战役AI脚本的变量
    constant boolean array alive
    //需要对玩家进行暴力攻击标识
    //部分官方战役AI脚本的变量
    constant boolean array needs_agro
    //目标点 X 坐标
    //记录触发器传来的攻击目标点
    //部分官方战役AI脚本的变量
    constant integer SET_GOAL_X             = 1
    //目标点 Y 坐标
    //记录触发器传来的攻击目标点
    //部分官方战役AI脚本的变量
    constant integer SET_GOAL_Y             = 2
    //开始攻击目标信号
    //记录触发器传来的开始攻击目标信号
    //部分官方战役AI脚本的变量
    constant integer ATTACK_GOAL            = 3
    //攻击目标玩家的编号
    //记录触发器传来的攻击目标玩家的编号
    //部分官方战役AI脚本的变量
    constant integer ATTACK_PLAYER          = 4
    //传送点 Y 坐标
    //记录触发器传来的传送点
    //部分官方战役AI脚本的变量
    constant integer SET_TELEPORT_X         = 5
    //传送点 Y 坐标
    //记录触发器传来的传送点
    //部分官方战役AI脚本的变量
    constant integer SET_TELEPORT_Y         = 6
    //开始传送信号
    //记录触发器传来的开始传送信号
    //部分官方战役AI脚本的变量
    constant integer TELEPORT               = 7
    //停止攻击信号
    //记录触发器传来的停止攻击信号
    //部分官方战役AI脚本的变量
    constant integer STOP_CURRENT_ATTACK    = 8
    //攻击信号
    //记录触发器传来的攻击信号
    //部分官方战役AI脚本的变量
    constant integer ATTACK_ZOMBIES         = 9
    //主基地建造点 X 坐标
    //部分官方战役AI脚本的变量
    constant real MAIN_TOWN_X   = 0
    //主基地建造点 Y 坐标
    //部分官方战役AI脚本的变量
    constant real MAIN_TOWN_Y   = 0
    //新主基地建造点 X 坐标
    //部分官方战役AI脚本的变量
    constant real GRAVEYARD_X   = 0
    //新主基地建造点 Y 坐标
    //部分官方战役AI脚本的变量
    constant real GRAVEYARD_Y   = 0
    //防守点 X 坐标
    //部分官方战役AI脚本的变量
    constant real DEFENSE_X     = 0
    //防守点 Y 坐标
    //部分官方战役AI脚本的变量
    constant real DEFENSE_Y     = 0
    //英雄回家集结点 X 坐标
    //部分官方战役AI脚本的变量
    constant real FAILSAFE_X    = 0
    //英雄回家集结点 Y 坐标
    //部分官方战役AI脚本的变量
    constant real FAILSAFE_Y    = 0
    //防御组单位数量过低警报，默认为假
    //部分官方战役AI脚本的变量
    constant boolean on_alert            = false
    //防御组补充模式，根据不同的模式补充不同数量的多种单位
    //部分官方战役AI脚本的变量
    constant integer defcon              = 5
    //敌方存活单位数量，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer trees_alive         = 100
    //命令类型 设置玩家插槽，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer SET_SLOT       = 1
    //命令类型 允许建造/训练，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer TURN_ON        = 2
    //命令类型 不允许建造/训练，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer TURN_OFF       = 3
    //命令类型 接收防御点 X 坐标，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer CAPT_X         = 4
    //命令类型 接收防御点 Y 坐标，从触发器命令获取
    //部分官方战役AI脚本的变量
    constant integer CAPT_Y         = 5
    //伊利丹主城 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ILLIDAN_TOWN_X     = 0
    //伊利丹主城 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ILLIDAN_TOWN_Y     = 0
    //伊利丹防御点 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ILLIDAN_DEF_X      = 0
    //伊利丹防御点 Y 坐标（）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ILLIDAN_DEF_Y      = 0
    //攻击点 X 坐标
    //部分官方战役AI脚本的变量
    constant integer OFFSET_X           = 0
    //攻击点 Y 坐标
    //部分官方战役AI脚本的变量
    constant integer OFFSET_Y           = 0
    //飞蛇（娜迦族）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_COUATL2       = 'n000'
    //深海鱼人掠夺者（娜迦族）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_REAVER2       = 'n001'
    //纳迦皇家卫兵
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_ROYAL2        = 'n002'
    //纳迦侍从
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_MYRMIDON2     = 'n003'
    //毒鳍龙
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_SNAP_DRAGON2  = 'n004'
    //龙龟（娜迦族）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_TURTLE2       = 'n005'
    //纳迦海妖
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NAGA_SIREN2        = 'n007'
    //进攻组飞蛇（娜迦族）数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_COUATL      = 0
    //进攻组毒鳍龙数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_SNAP_DRAGON = 1
    //进攻组深海鱼人掠夺者（娜迦族）数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_REAVER      = 2
    //进攻组纳迦侍从数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_MYRMIDON    = 3
    //进攻组纳迦海妖数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_SIREN       = 4
    //进攻组龙龟（娜迦族）数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_TURTLE      = 5
    //进攻组纳迦皇家卫兵数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_ROYAL       = 6
    //进攻组单位类型数组长度上限下标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer BUCKET_END         = 7
    //1号界碑 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_1_X       =  1
    //1号界碑 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_1_Y       =  2
    //2号界碑 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_2_X       =  3
    //2号界碑 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_2_Y       =  4
    //3号界碑 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_3_X       =  5
    //3号界碑 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_3_Y       =  6
    //4号界碑 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_4_X       =  7
    //4号界碑 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SET_TOWN_4_Y       =  8
    //工人筑城信号，用于告知AI界碑已占领，需要建造主城
    //从触发器获取信号
    //官方战役冰封王座关卡AI脚本的变量
    constant integer PEONS_LOST         =  9
    //界碑丢失信号，用于告知AI界碑已丢失
    //从触发器获取信号
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SLOT_LOST          = 10
    //守卫界碑信号，用于告知AI界碑正被敌方占领，需要守卫
    //从触发器获取信号
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SLOT_GAINED        = 11
    //占领界碑中信号，用于告知AI界碑正在占领
    //从触发器获取信号
    //官方战役冰封王座关卡AI脚本的变量
    constant integer SLOT_STEPPED_ON    = 12
    //占领界碑信号，用于告知AI界碑已被占领
    //从触发器获取信号
    //官方战役冰封王座关卡AI脚本的变量
    constant integer STARTUP_CMDS       = 12
    //普通/迅捷攻击
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean NORMAL_ATTACK      = true
    //携带工人攻击
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean PEON_ATTACK        = false
    //界碑控制标识 未被控制
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NO_CONTROL         = 1
    //界碑控制标识 被伊利丹控制
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ILLIDAN_CONTROL    = 2
    //界碑控制标识 被阿尔萨斯控制
    //官方战役冰封王座关卡AI脚本的变量
    constant integer ARTHAS_CONTROL     = 3
    //无法执行攻击
    //官方战役冰封王座关卡AI脚本的变量
    constant integer NOT_POSSIBLE       = 1
    //初始界碑，该变量未使用
    //官方战役冰封王座关卡AI脚本的变量
    constant integer START_SLOT         = 2
    //第一波攻击
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean first_attack                = true
    //行动状态
    //官方战役冰封王座关卡AI脚本的变量
    constant integer action_state                = SLOT_LOST
    //下一个界碑
    //官方战役冰封王座关卡AI脚本的变量
    constant integer next_slot                   = -1
    //攻击时间间隔
    //官方战役冰封王座关卡AI脚本的变量
    constant integer attack_delay                = 1
    //攻击组数组长度上限
    //官方战役冰封王座关卡AI脚本的变量
    constant integer attack_index                = 0
    //伊利丹需要复活标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean rebuild_Illidan             = true
    //正在占领界碑标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean stepped_on                  = false
    //自杀进攻模式标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean suicide_mode                = false
    //自杀进攻已运行标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean did_suicide                 = false
    //自超时失败标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean timeout_failure             = false
    //界碑 X 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array town_x
    //界碑 Y 坐标
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array town_y
    //工人死亡标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean array peons_lost
    //界碑已占领标识
    //官方战役冰封王座关卡AI脚本的变量
    constant boolean array slot_owned
    //界碑占领者标识
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array slot_control
    //伊利丹攻击延迟模式0
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array Illidan0
    //伊利丹攻击延迟模式1
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array Illidan1
    //伊利丹攻击延迟模式2
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array Illidan2
    //伊利丹攻击延迟模式3
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array Illidan3
    //攻击组最小数量（指定单位类型）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array attack_min_COPs
    //攻击组最大数量（指定单位类型）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array attack_max_COPs
    //攻击组单位数量（与进入战役时选的难度挂钩）
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array attack_qty
    //攻击组单位类型
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array attack_bucket
    //攻击组额外单位数量
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array bucket_qty
    //攻击组额外单位类型
    //官方战役冰封王座关卡AI脚本的变量
    constant integer array bucket_unitid
    //敌方人口平衡因素，按此参数调整攻击组单位数量
    //官方战役冰封王座关卡AI脚本的变量
    constant real array food_factor
    //敌方冰霜巨龙数量平衡因素，按此参数调整攻击组单位数量
    //官方战役冰封王座关卡AI脚本的变量
    constant real dragon_factor


    //人族AI全局变量

    //骑士训练标识，为真时会训练骑士及研究动物作战训练
    constant boolean b_knights_ok        = false

    //当前神秘之塔数量，含建造中
    constant integer c_arcane            = 0
    //当前狮鹫笼数量，不含建造中
    constant integer c_aviary_done       = 0
    //当前破法者数量，不含建造中
    constant integer c_breaker_done      = 0
    //当前城堡（人族三本基地）数量，不含建造中
    //同时统计城镇大厅（人族一本基地），主城（人族二本基地）的数量，不含建造中
    constant integer c_castle_done       = 0
    //当前人族步兵数量，不含建造中
    constant integer c_footman_done      = 0
    //当前狮鹫骑士数量，不含建造中
    constant integer c_gryphon_done      = 0
    //当前矮人直升机数量，不含建造中
    constant integer c_gyro_done         = 0
    //当前城镇大厅（人族一本基地）数量，含建造中
    //同时统计主城（人族二本基地），城堡（人族三本基地）的数量，含建造中
    constant integer c_hall              = 0
    //当前城镇大厅（人族一本基地）数量，不含建造中
    //同时统计主城（人族二本基地），城堡（人族三本基地）的数量，不含建造中
    constant integer c_hall_done         = 0
    //当前龙鹰骑士数量，不含建造中
    constant integer c_hawk_done         = 0
    //当前人族农场数量，含建造中
    constant integer c_house             = 0
    //当前人族农场数量，不含建造中
    constant integer c_house_done        = 0
    //当前主城（人族二本基地）数量，不含建造中
    //同时统计城镇大厅（人族一本基地），城堡（人族三本基地）的数量，不含建造中
    constant integer c_keep_done         = 0
    //当前骑士数量，不含建造中
    constant integer c_knight_done       = 0
    //当前伐木场数量，不含建造中
    constant integer c_mill_done         = 0
    //当前矮人迫击炮数量，不含建造中
    constant integer c_mortar_done       = 0
    //当前农民数量，不含建造中
    constant integer c_peasant_done      = 0
    //当前牧师数量，不含建造中
    constant integer c_priest_done       = 0
    //当前矮人火枪手数量，不含建造中
    constant integer c_rifleman_done     = 0
    //当前神秘圣地数量，不含建造中
    constant integer c_sanctum_done      = 0
    //当前铁匠铺数量，不含建造中
    constant integer c_smith_done        = 0
    //当前女巫数量，不含建造中
    constant integer c_sorceress_done    = 0
    //当前坦克数量，不含建造中
    constant integer c_tank_done         = 0
    //当前哨塔数量，含建造中
    //同时统计防御塔、炮塔的数量，含建造中
    constant integer c_watch             = 0
    //当前哨塔数量，不含建造中
    //同时统计防御塔、炮塔的数量，不含建造中
    constant integer c_watch_done        = 0
    //当前车间数量，不含建造中
    constant integer c_workshop_done     = 0

    //人族步兵数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_footmen   = 0
    //牧师数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_priest    = 0
    //矮人火枪手数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_riflemen  = 0
    //矮人直升机数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_gyro      = 0
    //狮鹫骑士数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_gryphon   = 0
    //对空单位数量，含建造中
    //该变量未赋值，属于BUG，正常应该统计所有矮人火枪手、矮人直升机、狮鹫骑士的数量（含建造中）
    //混乱之治AI脚本变量
    constant integer C_vs_air    = 0
    //矮人火枪手训练上限
    //混乱之治AI脚本变量
    constant integer max_rifle   = 0
    //矮人直升机训练上限
    //混乱之治AI脚本变量
    constant integer max_gyro    = 0
    //狮鹫骑士训练上限
    //混乱之治AI脚本变量
    constant integer max_gryphon = 0
    //拥有主城（人族二本基地）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean keep        = false
    //拥有城堡（人族三本基地）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean castle      = false
    //拥有伐木场标识，伐木场数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean mill        = false
    //拥有铁匠铺标识，铁匠铺数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean smith       = false
    //拥有兵营（人族）标识，兵营（人族）数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean barracks    = false
    //骑士可训练标识，拥有兵营（人族）、伐木场、铁匠铺、城堡（人族三本基地）时为真
    //混乱之治AI脚本变量
    constant boolean knights     = false
    //拥有车间标识，车间数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean workshop    = false
    //拥有神秘圣地标识，神秘圣地数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean sanctum     = false
    //拥有狮鹫笼标识，狮鹫笼数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean aviary      = false
    //拥有牧师标识，牧师数量（含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean priests     = false
    //拥有女巫标识，女巫数量（含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean sorcery     = false

    //科技指数
    //官方演示AI脚本变量
    constant integer total_stones
    //国王祭坛
    //官方演示AI脚本变量
    constant integer altar       = 'halt'
    //神秘圣地
    //官方演示AI脚本变量
    constant integer sanctum     = 'hars'
    //车间
    //官方演示AI脚本变量
    constant integer armory      = 'harm'
    //兵营（人族）
    //官方演示AI脚本变量
    constant integer garrison    = 'hbar'
    //农场
    //官方演示AI脚本变量
    constant integer house       = 'hhou'
    //城镇大厅（人族一本基地）
    //官方演示AI脚本变量
    constant integer town_hall   = 'htow'
    //铁匠铺
    //官方演示AI脚本变量
    constant integer smith       = 'hbla'
    //城堡（人族三本基地）
    //官方演示AI脚本变量
    constant integer castle      = 'hcas'
    //炮塔
    //官方演示AI脚本变量
    constant integer cannon      = 'hctw'
    //防御塔
    //官方演示AI脚本变量
    constant integer guard       = 'hgtw'
    //主城（人族二本基地）
    //官方演示AI脚本变量
    constant integer keep        = 'hkee'
    //教堂（人族）（编辑器无此单位）
    //官方演示AI脚本变量
    constant integer church      = 'htws'
    //伐木场
    //官方演示AI脚本变量
    constant integer mill        = 'hlum'
    //农民
    //官方演示AI脚本变量
    constant integer peon        = 'hpea'
    //步兵（人族）
    //官方演示AI脚本变量
    constant integer footman     = 'hfoo'
    //巨蛇（人族）（编辑器无此单位）
    //官方演示AI脚本变量
    constant integer serpent     = 'hegr'
    //矮人飞行器
    //官方演示AI脚本变量
    constant integer copter      = 'hgyr'
    //骑士
    //官方演示AI脚本变量
    constant integer knight      = 'hkni'
    //牧师
    //官方演示AI脚本变量
    constant integer priest      = 'hmpr'
    //矮人迫击炮
    //官方演示AI脚本变量
    constant integer mortar      = 'hmtm'
    //矮人火枪炮
    //官方演示AI脚本变量
    constant integer rifle       = 'hrif'
    //女巫
    //官方演示AI脚本变量
    constant integer caster      = 'hsor'
    //坦克（人族）（编辑器无此单位）
    //官方演示AI脚本变量
    constant integer tank        = 'hstt'
    //水元素
    //官方演示AI脚本变量
    constant integer elemental   = 'hwat'
    //科技 钢铁铸剑
    //官方演示AI脚本变量
    constant integer Uweapons    = 'Rhme'
    //科技 黑火药
    //官方演示AI脚本变量
    constant integer Uranged     = 'Rhra'
    //科技 炮兵（编辑器无此科技）
    //官方演示AI脚本变量
    constant integer Uartillery  = 'Rhaa'
    //科技 钢铁装甲
    //官方演示AI脚本变量
    constant integer Uarmor      = 'Rhar'
    //科技 改良石工技术
    //官方演示AI脚本变量
    constant integer Ubldgs      = 'Rhac'
    //科技 控制魔法
    //官方演示AI脚本变量
    constant integer Usight      = 'Rhss'
    //圣骑士
    //官方演示AI脚本变量
    constant integer paladin     = 'Hpal'
    //大法师
    //官方演示AI脚本变量
    constant integer king        = 'Hamg'
    //山丘之王
    //官方演示AI脚本变量
    constant integer mage        = 'Hmkg'
    //游侠（人族英雄）（编辑器无此单位）
    //官方演示AI脚本变量
    constant integer ranger      = 'Hran'
    //攻击状态 结束攻击
    //官方演示AI脚本变量
    constant integer END_ASSAULT    = 0
    //攻击状态 不攻击野怪（中立敌对玩家单位）
    //官方演示AI脚本变量
    constant integer NO_CREEPS      = 1
    //攻击状态 搜寻野怪（中立敌对玩家单位）
    //官方演示AI脚本变量
    constant integer CHECK_CREEPS   = 2
    //攻击状态 等待攻击组组建
    //官方演示AI脚本变量
    constant integer AWAIT_TROOPS   = 3
    //攻击状态 击杀野怪（中立敌对玩家单位）
    //官方演示AI脚本变量
    constant integer KILL_CREEP     = 4
    //攻击状态 等待战斗结束
    //官方演示AI脚本变量
    constant integer AWAIT_BATTLE   = 5
    //攻击状态 等待到达战斗地点
    //官方演示AI脚本变量
    constant integer AWAIT_GOAL     = 6
    //攻击状态 返回基地
    //官方演示AI脚本变量
    constant integer RETURN_HOME    = 7
    //攻击状态 等待进攻组恢复生命
    //官方演示AI脚本变量
    constant integer AWAIT_HEALING  = 8
    //攻击计时
    //官方演示AI脚本变量
    constant integer assault_timer   = 0
    //攻击波次
    //官方演示AI脚本变量
    constant integer assaultN        = 1   
    //当前攻击状态
    //官方演示AI脚本变量
    constant integer assault_state   = CHECK_CREEPS
    //工人分配计时上限，默认值10
    //在演示AI脚本中，每倒数10次才会重新分配工人采集，该变量用于倒数到0后恢复倒数次数
    //官方演示AI脚本变量
    constant integer PEON_ASSIGNMENT = 10
    //工人分配计时
    //在演示AI脚本中，每倒数10次才会重新分配工人采集，该变量用于标识当前倒数了几次
    //官方演示AI脚本变量
    constant integer peon_timer = 0
    //标记获取的目标野怪（中立敌对玩家单位）
    //官方演示AI脚本变量
    constant unit creep_target
    //训练/建造/研究数组 建造数量序列数组下标
    //官方演示AI脚本变量
    constant integer build_index
    //训练/建造/研究数组 科技标识，默认值2
    //官方演示AI脚本变量
    constant integer UPGRADE    = 2
    //攻击组数组 数组下标
    //官方演示AI脚本变量
    constant integer assault_index
    //攻击组数组 单位数量
    //官方演示AI脚本变量
    constant integer array assault_qty
    //攻击组数组 单位类型
    //官方演示AI脚本变量
    constant integer array assault_item

    //龙鹰骑士（不享有乌云科技）
    //部分官方战役AI脚本的变量
    constant integer NO_CLOUD_HAWK  = 'h000'
    //龙鹰骑士
    //部分官方战役AI脚本的变量
    constant integer CLOUD_HAWK     = HUMAN_DRAGON_HAWK


    //兽族AI全局变量

    //当前兵营（兽族）数量，不含建造中
    constant integer c_barracks_done     = 0
    //当前蝙蝠骑士数量，含建造中
    constant integer c_batrider          = 0
    //当前蝙蝠骑士数量，不含建造中
    constant integer c_batrider_done     = 0
    //当前兽栏数量，不含建造中
    constant integer c_bestiary_done     = 0
    //当前兽族地洞数量，含建造中
    constant integer c_burrow            = 0
    //当前兽族地洞数量，不含建造中
    constant integer c_burrow_done       = 0
    //当前投石车数量，含建造中
    constant integer c_cat               = 0
    //当前投石车数量，不含建造中
    constant integer c_cat_done          = 0
    //当前巫医数量，含建造中
    constant integer c_doc               = 0
    //当前巫医数量，不含建造中
    constant integer c_doc_done          = 0
    //当前战争磨坊数量，不含建造中
    constant integer c_forge_done        = 0
    //当前堡垒（兽族三本基地）数量，不含建造中
    //同时统计大厅（兽族一本基地），据点（兽族二本基地）的数量，不含建造中
    constant integer c_fortress_done     = 0
    //当前大厅（兽族一本基地）数量，含建造中
    //同时统计据点（兽族二本基地），堡垒（兽族三本基地）的数量，含建造中
    constant integer c_great_hall        = 0
    //当前大厅（兽族一本基地）数量，不含建造中
    //同时统计据点（兽族二本基地），堡垒（兽族三本基地）的数量，不含建造中
    constant integer c_great_hall_done   = 0
    //当前兽族步兵数量，含建造中
    constant integer c_grunt             = 0
    //当前兽族步兵数量，不含建造中
    constant integer c_grunt_done        = 0
    //当前猎头者数量，含建造中
    //该变量并未赋值，属于BUG，正常还应同时统计狂战士的数量
    constant integer c_hunter            = 0
    //当前猎头者数量，不含建造中
    //同时统计狂战士的数量
    constant integer c_hunter_done       = 0
    //当前科多兽数量，含建造中
    constant integer c_kodo              = 0
    //当前科多兽数量，不含建造中
    constant integer c_kodo_done         = 0
    //当前灵魂小屋数量，不含建造中
    constant integer c_lodge_done        = 0
    //当前苦工数量，不含建造中
    constant integer c_peon_done         = 0
    //当前狼骑兵数量，含建造中
    constant integer c_raider            = 0
    //当前狼骑兵数量，不含建造中
    constant integer c_raider_done       = 0
    //当前萨满数量，含建造中
    constant integer c_shaman            = 0
    //当前萨满数量，不含建造中
    constant integer c_shaman_done       = 0
    //当前据点（兽族二本基地）数量，不含建造中
    //同时统计大厅（兽族一本基地），堡垒（兽族三本基地）的数量，不含建造中
    constant integer c_stronghold_done   = 0
    //当前灵魂行者数量，含建造中
    //同时统计灵魂行者（虚无形态）的数量
    constant integer c_swalker           = 0
    //当前灵魂行者数量，不含建造中
    //同时统计灵魂行者（虚无形态）的数量
    constant integer c_swalker_done      = 0
    //当前牛头人数量，含建造中
    constant integer c_tauren            = 0
    //当前牛头人数量，不含建造中
    constant integer c_tauren_done       = 0
    //当前牛头人图腾数量，不含建造中
    constant integer c_totem_done        = 0
    //当前巫毒小屋数量，不含建造中
    constant integer c_voodoo_done       = 0
    //当前驭风者（风骑士）数量，含建造中
    constant integer c_wyvern            = 0
    //当前驭风者（风骑士）数量，不含建造中
    constant integer c_wyvern_done       = 0

    //当前猎头者数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_hunters       = 0
    //当前兽族步兵数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_grunt         = 0
    //当前狼骑兵数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_raiders       = 0
    //拥有战争磨坊标识，战争磨坊数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean forge           = false
    //拥有据点（兽族二本基地）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean stronghold      = false
    //拥有堡垒（兽族三本基地）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean fortress        = false
    //拥有兽栏标识，兽栏数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean bestiary        = false
    //拥有灵魂小屋标识，灵魂小屋数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean lodge           = false
    //拥有牛头人图腾标识，牛头人图腾数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean totem           = false


    //亡灵AI全局变量

    //当前用于攻击的食尸鬼数量
    constant integer AG                  = 0 // attacking ghouls
    //当前用于采木的食尸鬼数量
    constant integer WG                  = 0 // wood ghouls
    //当前憎恶数量，含建造中
    constant integer c_abom              = 0
    //当前憎恶数量，不含建造中
    constant integer c_abom_done         = 0
    //当前侍僧数量，含建造中
    constant integer c_acolyte           = 0
    //当前女妖数量，含建造中
    constant integer c_banshee           = 0
    //当前女妖数量，不含建造中
    constant integer c_banshee_done      = 0
    //当前埋骨地数量，不含建造中
    constant integer c_boneyard_done     = 0
    //当前黑色城堡数量，不含建造中
    //并未同时统计浮空城/大墓、亡者大厅的数量，疑似BUG
    constant integer c_citadel_done      = 0
    //当前地穴恶魔（蜘蛛）数量，含建造中
    constant integer c_fiend             = 0
    //当前地穴恶魔（蜘蛛）数量，不含建造中
    constant integer c_fiend_done        = 0
    //当前石像鬼数量，含建造中
    //同时统计石像鬼石像形态的数量
    constant integer c_garg              = 0
    //当前石像鬼数量，不含建造中
    //同时统计石像鬼石像形态的数量
    constant integer c_garg_done         = 0
    //当前食尸鬼数量，不含建造中
    constant integer c_ghoul_done        = 0
    //当前坟场数量，不含建造中
    constant integer c_grave_done        = 0
    //当前亡者大厅数量，不含建造中
    //同时统计浮空城/大墓、黑色城堡的数量，不含建造中
    constant integer c_halls_done        = 0
    //当前浮空城/大墓地数量，含建造中
    //同时统计亡者大厅、黑色城堡的数量，含建造中
    constant integer c_neclis            = 0
    //当前浮空城/大墓地数量，不含建造中
    //同时统计亡者大厅、黑色城堡的数量，不含建造中
    constant integer c_neclis_done       = 0
    //当前通灵师（亡灵男巫）数量，含建造中
    constant integer c_necro             = 0
    //当前通灵师（亡灵男巫）数量，不含建造中
    constant integer c_necro_done        = 0
    //当前屠宰场数量，不含建造中
    constant integer c_slaughter_done    = 0
    //当前毁灭者数量，不含建造中
    constant integer c_sphinx_done       = 0
    //当前幽魂之塔数量，不含建造中
    constant integer c_spirit_done       = 0
    //当前黑曜石雕像数量，含建造中
    constant integer c_statue            = 0
    //当前黑曜石雕像数量，不含建造中
    constant integer c_statue_done       = 0
    //当前诅咒神殿数量，不含建造中
    constant integer c_temple_done       = 0
    //当前遗物陵墓数量，不含建造中
    constant integer c_tomb_done         = 0
    //当前闹鬼金矿数量，含建造中
    constant integer c_undead_mines      = 0
    //当前清道夫（绞肉车）数量，含建造中
    constant integer c_wagon             = 0
    //当前清道夫（绞肉车）数量，含建造中
    constant integer c_wagon_done        = 0
    //当前拥有蛛网科技的地穴恶魔（蜘蛛）数量，含建造中
    //蛛网研究完成前都是0
    constant integer c_web_fiend_done    = 0
    //当前木材数（用于处理亡灵采木食尸鬼数量）
    constant integer c_wood              = 0
    //当前冰霜巨龙数量，不含建造中
    constant integer c_wyrm_done         = 0
    //当前通灵塔数量，含建造中
    //同时统计幽魂之塔、蛛魔之塔（冰塔）的数量，含建造中
    constant integer c_zig               = 0
    //当前通灵塔数量，不含建造中
    //同时统计幽魂之塔、蛛魔之塔（冰塔）的数量，不含建造中
    constant integer c_zig_done          = 0


    //拥有亡者大厅标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean halls       = false
    //拥有黑色城堡标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean citadel     = false
    //拥有坟场，坟场数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean grave       = false
    //拥有近战单位标识，憎恶及食尸鬼数量（不含建造中）都大于0时为真
    //混乱之治AI脚本变量
    constant boolean melee       = false
    //拥有远程单位标识，蜘蛛及石像鬼数量（不含建造中）都大于0时为真
    //石像鬼统计石像鬼石像形态的数量
    //混乱之治AI脚本变量
    constant boolean ranged      = false
    //拥有憎恶标识，憎恶数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean C_aboms     = false // count > 0
    //憎恶可训练标识，黑色城堡和屠宰场数量（不含建造中）都大于0，拥有，当前木材大于100时为真
    //混乱之治AI脚本变量
    constant boolean M_aboms     = false // may make them
    //女妖可训练标识，拥有黑色城堡和诅咒神殿数量（不含建造中）都大于0时为真
    //混乱之治AI脚本变量
    constant boolean banshees    = false
    //拥有牺牲深渊标识，牺牲深渊数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean sac_pit     = false
    //拥有埋骨地标识，埋骨地数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean boneyard    = false
    //拥有地穴恶魔（蜘蛛）标识，地穴恶魔（蜘蛛）数量（不含建造中）大于1时为真
    //混乱之治AI脚本变量
    constant boolean fiends      = false
    //拥有诅咒神殿标识，诅咒神殿数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean slaught     = false
    //拥有屠宰场标识，屠宰场数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean temple      = false
    //拥有清道夫（绞肉车）标识，清道夫（绞肉车）数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean wagons      = false

    //最小食尸鬼数量，简单及普通（与进入战役时选的难度挂钩），默认值3
    //部分官方战役AI脚本的变量
    constant integer MIN_GHOULS_NORMAL =  3
    //最小食尸鬼数量，困难（与进入战役时选的难度挂钩），默认值8
    //部分官方战役AI脚本的变量
    constant integer MIN_GHOULS_HARD   =  8
    //最大食尸鬼数量，简单及普通（与进入战役时选的难度挂钩），默认值10
    //部分官方战役AI脚本的变量
    constant integer MAX_GHOULS_NORMAL = 10
    //最大食尸鬼数量，困难（与进入战役时选的难度挂钩），默认值15
    //部分官方战役AI脚本的变量
    constant integer MAX_GHOULS_HARD   = 15
    //最优食尸鬼数量
    //部分官方战役AI脚本的变量
    constant integer best_ghouls         = 0


    //暗夜AI全局变量


    //腐蚀吐息已研究标识
    constant boolean b_acid_breath       = false
    //当前弓箭手数量，含建造中
    constant integer c_archer            = 0
    //当前弓箭手数量，不含建造中
    constant integer c_archer_done       = 0
    //当前投刃车数量，含建造中
    constant integer c_ballista          = 0
    //当前投刃车数量，不含建造中
    constant integer c_ballista_done     = 0
    //当前熊德数量，含建造中
    //同时统计人形和熊形的数量，含建造中
    constant integer c_bear              = 0
    //当前熊德数量，不含建造中
    //同时统计人形和熊形的数量，不含建造中
    constant integer c_bear_done         = 0
    //当前奇美拉数量，含建造中
    constant integer c_chimaera          = 0
    //当前奇美拉数量，不含建造中
    constant integer c_chimaera_done     = 0
    //当前精灵龙数量，不含建造中
    constant integer c_dragon_done       = 0
    //当前树妖（小鹿）数量，含建造中
    constant integer c_dryad             = 0
    //当前树妖（小鹿）数量，不含建造中
    constant integer c_dryad_done        = 0
    //当前猎手大厅数量，不含建造中
    constant integer c_hunt_hall_done    = 0
    //当前女猎手数量，含建造中
    constant integer c_huntress          = 0
    //当前女猎手数量，不含建造中
    constant integer c_huntress_done     = 0
    //当前知识古树数量，不含建造中
    constant integer c_lore_done         = 0
    //当前被缠绕的金矿数量，不含建造中
    constant integer c_mines_done        = 0
    //当前月亮井数量，含建造中
    constant integer c_moon_well         = 0
    //当前月亮井数量，不含建造中
    constant integer c_moon_well_done    = 0
    //当前山岭巨人数量，含建造中
    constant integer c_mtn_giant         = 0
    //当前山岭巨人数量，不含建造中
    constant integer c_mtn_giant_done    = 0
    //当前奇美拉栖木数量，不含建造中
    constant integer c_roost_done        = 0
    //当前鸟德数量，含建造中
    //同时统计人形和鸦形的数量，含建造中
    constant integer c_talon             = 0
    //当前鸟德数量，不含建造中
    //同时统计人形和鸦形的数量，不含建造中
    constant integer c_talon_done        = 0
    //当前纪元之树（暗夜二本）数量，不含建造中
    //同时统计生命之树（暗夜一本），永恒之树（暗夜三本）的数量，不含建造中
    constant integer c_tree_ages_done    = 0
    //当前永恒之树（暗夜三本）数量，不含建造中
    //同时统计生命之树（暗夜一本），纪元之树（暗夜二本）的数量，不含建造中
    constant integer c_tree_etern_done   = 0
    //当前生命之树（暗夜一本）数量，含建造中
    //同时统计纪元之树（暗夜二本），永恒之树（暗夜三本）的数量，含建造中
    constant integer c_tree_life         = 0
    //当前生命之树（暗夜一本）数量，不含建造中
    //同时统计纪元之树（暗夜二本），永恒之树（暗夜三本）的数量，不含建造中
    constant integer c_tree_life_done    = 0
    //当前战争古树数量，不含建造中
    constant integer c_war_done          = 0
    //当前风之古树数量，不含建造中
    constant integer c_wind_done         = 0
    //当前小精灵数量，不含建造中
    constant integer c_wisp_done         = 0
    //当前奇迹古树数量，不含建造中
    constant integer c_wonders_done      = 0


    //当前女猎手数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_huntress  = 0
    //当前弓箭手数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_archers   = 0
    //当前树妖（小鹿）数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_dryads    = 0
    //当前奇美拉数量，含建造中
    //混乱之治AI脚本变量
    constant integer C_chimaera  = 0
    //拥有知识古树标识，知识古树数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean lore        = false
    //拥有风之古树标识，风之古树数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean wind        = false
    //拥有纪元之树（暗夜二本）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean ages        = false
    //拥有永恒之树（暗夜三本）标识，一、二、三本主城数量（不含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean eternity    = false
    //拥有战争古树标识，战争古树数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean war         = false
    //拥有猎手大厅标识，猎手大厅数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean hunters     = false
    //拥有投刃车标识，投刃车数量（含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean ballista    = false
    //拥有熊德标识，人形及熊形熊德数量（含建造中）之和大于0时为真
    //混乱之治AI脚本变量
    constant boolean claws       = false
    //拥有奇美拉栖木标识，奇美拉栖木数量（不含建造中）大于0时为真
    //混乱之治AI脚本变量
    constant boolean roost       = false
    //熊德可用标识，拥有知识古树及利爪德鲁依专家训练科技全部升级完成时为真
    //混乱之治AI脚本变量
    constant boolean use_bears   = false


    //恶魔AI脚本全局变量

    //狂暴守卫
    //部分官方战役AI脚本的变量
    constant integer FEL_GUARD      = 'nfgu'
    //血恶魔
    //部分官方战役AI脚本的变量
    constant integer BLOODFIEND     = 'nfgb'
    //狂暴野兽
    //部分官方战役AI脚本的变量
    constant integer FEL_BEAST      = 'npfl'
    //虚无行者长老
    //部分官方战役AI脚本的变量
    constant integer ELDER_VOID     = 'nvde'
    //巨大虚无行者长老
    //部分官方战役AI脚本的变量
    constant integer GREATER_VOID   = 'nvdg'
    //虚空/耐瑟蜉蝣
    //部分官方战役AI脚本的变量
    constant integer NETHER_DRAKE   = 'nndk'
    //虚空/耐瑟幼龙
    //部分官方战役AI脚本的变量
    constant integer NETHER_HATCH   = 'nnht'
    //领主
    //部分官方战役AI脚本的变量
    constant integer OVERLORD       = 'nfov'
    //艾瑞达男巫
    //部分官方战役AI脚本的变量
    constant integer SORCEROR       = 'ners' //lvl 3 abolish
    //艾瑞达信魔者
    //部分官方战役AI脚本的变量
    constant integer DIABOLIST      = 'nerd' //lvl 6 curse, firebolt, parasite
    //狂暴洗劫者
    //部分官方战役AI脚本的变量
    constant integer FEL_RAVAGER    = 'npfm'
    //艾瑞达法师
    //部分官方战役AI脚本的变量
    constant integer ERE_WARLOCK    = 'nerw'
    //虚空/耐瑟龙
    //部分官方战役AI脚本的变量
    constant integer NETHER_DRAGON  = 'nndr'
    //恶男
    //部分官方战役AI脚本的变量
    constant integer TORMENTOR      = 'ndqv'
    //恶妇
    //部分官方战役AI脚本的变量
    constant integer TEMPTRESS      = 'ndqt'
    //痛苦少女
    //部分官方战役AI脚本的变量
    constant integer MAIDEN         = 'ndqp'
    //苦难女王
    //部分官方战役AI脚本的变量
    constant integer QUEEN          = 'ndqs'


    //物编别名补充

    // 英雄 月之女祭司
    constant integer MOON_PRIESTESS
    // 英雄 兽王
    constant integer BEAST_MASTER
    // 英雄 黑暗游侠
    constant integer DARK_RANGER
    // 英雄 深渊领主
    constant integer NEUTRAL_PIT_LORD
    // 英雄 酒仙(熊猫)
    constant integer BREW_MASTER
    // 英雄 修补匠
    constant integer GOBLIN_TINKER
    // 英雄 火焰领主
    constant integer FIRELORD
    // 英雄 炼金术士
    constant integer ALCHEMIST
    // 科技 裂甲之刃
    constant integer UPG_SUN_BLADE
    // 物品 治疗药水
    constant integer HEALING_POTION
    // 物品 法力药水
    constant integer MANA_POTION
    // 物品 城镇传送卷轴/回城卷轴
    constant integer TOWN_PORTAL
    // 物品 象牙塔
    constant integer IVORY_TOWER
    // 物品 火焰宝珠
    constant integer ORB_OF_FIRE
    // 物品 庇护法杖/避难权杖
    constant integer STAFF_OF_SANCTUARY
    // 物品 治疗药膏
    constant integer HEALING_SALVE
    // 物品 速度卷轴
    constant integer SCROLL_OF_SPEED
    // 物品 闪电宝珠
    constant integer ORB_OF_LIGHTNING
    // 物品 迷你大厅(兽族)
    constant integer TINY_GREAT_HALL
    // 物品 通灵魔棒(骷髅法杖)
    constant integer ROD_OF_NECROMANCY
    // 物品 献祭之颅(制造腐地)
    constant integer SACRIFICIAL_SKULL
    // 物品 显影之尘
    constant integer DUST_OF_APPEARANCE
    // 物品 腐蚀宝珠
    constant integer ORB_OF_CORRUPTION
    // 物品 治疗卷轴
    constant integer SCROLL_OF_HEALING
    // 物品 月亮石
    constant integer MOONSTONE
    // 物品 保存法杖
    constant integer STAFF_OF_PRESERVATION
    // 物品 毒液宝珠
    constant integer ORB_OF_VENOM
    // 物品 反魔法药剂
    constant integer ANTI_MAGIC_POTION
    // 物品 仪式匕首
    constant integer RITUAL_DAGGER
    // 物品 贵族头环
    constant integer CIRCLET_OF_NOBILITY
    // 物品 法力护身符
    constant integer PERIAPT_OF_VITALITY
    // 物品 速度之靴
    constant integer BOOTS_OF_SPEED
    // 物品 显影之尘
    constant integer M_DUST_OF_APPEARANCE
    // 物品 治疗卷轴
    constant integer M_SCROLL_OF_HEALING
    // 物品 保护卷轴
    constant integer SCROLL_OF_PROTECTION
    // 物品 城镇传送卷轴/回城卷轴
    constant integer M_TOWN_PORTAL
    // 物品 隐形药水
    constant integer POTION_OF_INVISIBILITY
    // 物品 重修之书
    constant integer TOME_OF_RETRAINING
    // 物品 传送法杖
    constant integer STAFF_OF_TELEPORTATION
    // 物品 次级无敌药水
    constant integer POTION_OF_LESSER_INVULNERBILITY
    // 英雄技能 叉状闪电(娜迦海巫)
    constant integer FORKLIGHTNING
    // 英雄技能 冰霜箭(娜迦海巫)
    constant integer FROSTARROWS
    // 英雄技能 法力护盾(娜迦海巫)
    constant integer MANASHIELD
    // 英雄技能 龙卷风(娜迦海巫)
    constant integer TORNADO
    // 英雄技能 召唤巨熊(兽王)
    constant integer BEAR
    // 英雄技能 召唤豪猪(兽王)
    constant integer QUILBEAST
    // 英雄技能 召唤战鹰(兽王)
    constant integer HAWK
    // 英雄技能 群兽奔腾(兽王)
    constant integer STAMPEDE
    // 英雄技能 沉默(黑暗游侠)
    constant integer SILENCE
    // 英雄技能 黑蚀箭(黑暗游侠)
    constant integer BLACKARROW
    // 英雄技能 生命吸取(黑暗游侠)
    constant integer DRAIN
    // 英雄技能 蛊惑(黑暗游侠)
    constant integer CHARM
    // 英雄技能 火焰之雨(深渊领主)
    constant integer RAINOFFIRE
    // 英雄技能 恐惧嚎叫(深渊领主)
    constant integer HOWL
    // 英雄技能 顺劈斩(深渊领主)
    constant integer CLEAVING
    // 英雄技能 末日降临(深渊领主)
    constant integer DOOM
    // 英雄技能 火焰之息(熊猫)
    constant integer BOF
    // 英雄技能 酩酊酒雾(熊猫)
    constant integer HAZE
    // 英雄技能 醉拳(熊猫)
    constant integer BRAWLER
    // 英雄技能 风火雷电(熊猫)
    constant integer SEF
    // 英雄技能 口袋工厂(修补匠)
    constant integer POCKETFACTORY
    // 英雄技能 集束火箭(修补匠)
    constant integer ROCKETS
    // 英雄技能 工程升级(修补匠)
    constant integer UPGRADE
    // 英雄技能 机械地基(修补匠)
    constant integer ROBOGOBLIN
    // 英雄技能 灵魂燃烧(火焰领主)
    constant integer SOUL_BURN
    // 英雄技能 召唤熔岩爪牙(火焰领主)
    constant integer SUMMON_LAVASPAWN
    // 英雄技能 焚身化骨(箭矢)(火焰领主)
    constant integer INCINERATE
    // 英雄技能 火山爆发(火焰领主)
    constant integer VOLCANO
    // 英雄技能 治疗喷雾(炼金术士)
    constant integer HEALING_SPRAY
    // 英雄技能 酸性炸弹(炼金术士)
    constant integer ACID_BOMB
    // 英雄技能 化学狂暴(炼金术士)
    constant integer CHEMICAL_RAGE
    // 英雄技能 点金术(炼金术士)
    constant integer TRANSMUTE

endglobals


//--------------------------------------------------------------------------------------------------
//  Check
//--------------------------------------------------------------------------------------------------

//获取触发编辑器最后发送的命令
//AI编辑器导出AI脚本的功能
function CheckLastCommand takes boolean pop returns integer
    local integer cmd = GetLastCommand()
    if (pop) then
        call PopLastCommand(  )
    endif
    return cmd
endfunction

//获取触发编辑器最后发送命令的数据
//AI编辑器导出AI脚本的功能
function CheckLastCommandData takes boolean pop returns integer
    local integer data = GetLastData()
    if (pop) then
        call PopLastCommand(  )
    endif
    return data
endfunction


//获取触发编辑器最后发送命令的数据
//部分官方战役AI脚本的功能
function get_command takes nothing returns nothing
endfunction

//获取可用人口数
//AI编辑器导出AI脚本的功能
function TotalFoodProduced takes nothing returns integer
    return GetPlayerState(ai_player,PLAYER_STATE_RESOURCE_FOOD_CAP)
endfunction

//查询是否需要开矿
//AI编辑器导出AI脚本的功能
function ExpansionNeeded takes nothing returns boolean
    return take_exp
endfunction

//建造分矿
//AI编辑器导出AI脚本的功能
function BuildExpansion takes integer hallID, integer mineID returns nothing
    if (HallsCompleted(hallID)) then
        call SetBuildExpa( TownCount(hallID) + 1, mineID )
    endif
endfunction

//设置作弊码
//部分官方战役AI脚本的功能
function set_cheats takes nothing returns nothing
endfunction

//设置作弊码
//部分官方战役AI脚本的功能
function do_cheats takes nothing returns nothing
endfunction

//循环获取触发编辑器最后发送命令的数据
//部分官方战役AI脚本的功能
function message_loop takes nothing returns nothing
endfunction

//获取初始命令
//部分官方战役AI脚本的功能
function get_start_commands takes nothing returns nothing
endfunction

//等待暴力攻击
//默认用于获取触发器发送的暴力攻击命令
//部分官方战役AI脚本的功能
function process_commands takes nothing returns nothing
endfunction

//等待开局
//在电影完结或触发AI玩家工作前，保持等待，AI不进攻，且不采集/建造/训练
//部分官方战役AI脚本的功能
function wait_for_start takes nothing returns nothing
endfunction

//等待开局
//在电影完结或触发AI玩家工作前，保持等待，AI不进攻，但保持采集/建造/训练
//部分官方战役AI脚本的功能
function check_base_deaths takes nothing returns nothing
endfunction

//获取坐标，获取从触发器发来的点坐标
//部分官方战役AI脚本的功能
function get_coords takes nothing returns nothing
endfunction

//睡眠（指定时长）
//部分官方战役AI脚本的功能
function send_sleep takes integer seconds returns nothing
endfunction

//--------------------------------------------------------------------------------------------------
//  set_skills
//--------------------------------------------------------------------------------------------------

//设置英雄技能数组
//设置各英雄按不同顺序出场时的学习技能顺序
//AI编辑器导出AI脚本的功能
function SetHero takes integer order, integer heroid returns nothing
endfunction

//设置英雄出场顺序方案
//AI编辑器导出AI脚本的功能
function SelectHeroes takes nothing returns nothing
endfunction

//设置英雄升级后学习技能
//AI编辑器导出AI脚本的功能
function ChooseHeroSkill takes nothing returns integer
endfunction

//设置英雄技能数组
//设置本族四英雄按不同顺序出场时的学习技能顺序
//冰封王座AI脚本的功能
function set_skills takes nothing returns nothing
endfunction


//获取英雄等级对应的技能
//官方演示AI脚本及部分官方战役AI脚本的功能
function hero_levels takes nothing returns integer
endfunction

//设置英雄技能（按等级）
//仅AI有英雄时存在
//部分官方战役AI脚本的功能
function heroes takes nothing returns integer
endfunction


//设置英雄技能（按等级）
//仅AI有英雄时存在
//部分官方战役AI脚本的功能
function UtherAI takes nothing returns integer
endfunction

//--------------------------------------------------------------------------------------------------
//  setup_force and attack_sequence
//--------------------------------------------------------------------------------------------------


//查询攻击波次
//AI编辑器导出AI脚本的功能
function CurrentAttackWave takes nothing returns integer
endfunction


//重置攻击组数组长度
//AI编辑器导出AI脚本的功能
function ResetAttackUnits takes nothing returns nothing
endfunction

//添加单位类型及数量到攻击组
//AI编辑器导出AI脚本的功能
function AddAttackUnit takes integer minQty, integer maxQty, integer unitID returns nothing
endfunction


//获取最小攻击攻击组准备情况
//首英雄数量等于0和攻击波次大于1视为未准备完成
//AI编辑器导出AI脚本的功能
function HaveMinimumAttackers takes nothing returns boolean

endfunction

//设置攻击组进攻单位类型及数量
//将AI编辑器设置的各攻击组单位类型依次添加到攻击组（调用添加单位类型及数量到攻击组）
//AI编辑器导出AI脚本的功能
function PrepareAttackGroup takes integer groupID returns nothing
endfunction

//准备攻击组
//按AI编辑器设置的各攻击波次准备攻击组（调用设置攻击组进攻单位类型及数量）
//AI编辑器导出AI脚本的功能
function PrepareForces takes nothing returns nothing
endfunction

//攻击波次延迟
//AI编辑器导出AI脚本的功能
function AttackWaveDelay takes integer inWave returns nothing
endfunction

//更新攻击波次
//AI编辑器导出AI脚本的功能
function AttackWaveUpdate takes nothing returns nothing
endfunction


//添加单位类型及数量到攻击组
//官方演示AI脚本的功能
function set_assault takes integer qty, integer id returns nothing
endfunction



//准备攻击组
//官方演示AI脚本的功能
function setup_assault takes nothing returns nothing
endfunction

//添加额外单位到单位组
//部分官方战役AI脚本的功能
function extra_attackers takes nothing returns nothing
endfunction

//设置攻击组规模（按进入战役时选择的难度）
//部分官方战役AI脚本的功能
function set_attack_group takes integer min_COPs, integer max_COPs, integer normal, integer hard, integer idx returns nothing
endfunction

//攻击波次延迟判断（按进入战役时选择的难度）
//部分官方战役AI脚本的功能
function wave_time takes integer norm, integer hard returns integer
endfunction


//游戏平衡因素判断（按进入战役时选择的难度），用于调整攻击组强度
//部分官方战役AI脚本的功能
function balance_factor takes real norm, real hard returns real
endfunction

//游戏平衡信息，用于调整攻击组强度
//部分官方战役AI脚本的功能
function balance_info takes nothing returns nothing
endfunction

//储存单位类型信息
//部分官方战役AI脚本的功能
function unit_info takes nothing returns nothing
endfunction

//设置攻击组数组长度
//部分官方战役AI脚本的功能
function declare_unit takes integer unitid returns nothing
endfunction

//添加单位类型及数量到自杀攻击组
//部分官方战役AI脚本的功能
function declare_unit takes integer unitid returns nothing
endfunction

//添加单位类型及数量到攻击组
//部分官方战役AI脚本的功能
function add_units takes integer unitid returns nothing
endfunction

//准备攻击组
//部分官方战役AI脚本的功能
function gather_forces takes nothing returns nothing
endfunction

//设置混合波次，添加单位类型到战役攻击组
//部分官方战役AI脚本的功能
function mixed_wave takes integer hqty, integer hid, integer oqty, integer oid returns nothing
endfunction

//设置防御组
//部分官方战役AI脚本的功能
function set_defenders takes boolean fplayer returns nothing
endfunction

//设置防御组
//部分官方战役AI脚本的功能
function SetDefenders takes nothing returns nothing
endfunction

//设置最小防御组
//部分官方战役AI脚本的功能
function lower_defcon takes nothing returns nothing
endfunction

//获取暴力攻击可行性
//部分官方战役AI脚本的功能
function possible_agro takes integer target returns nothing
endfunction

//设置下一波进攻(对仍然存活的敌方玩家)
//部分官方战役AI脚本的功能
function next_alive takes nothing returns nothing
endfunction


//攻击序列
//部分官方战役AI脚本的功能
function assaults takes nothing returns nothing
endfunction

//攻击目标
//根据协同攻击确定是否告知盟友目标
//AI编辑器导出AI脚本的功能
function AttackTarget takes unit target, boolean addAlliance returns nothing
endfunction

//获取攻击目标
//根据AI编辑器设置的攻击目标及优先级自动获取目标
//AI编辑器导出AI脚本的功能
function LaunchAttack takes nothing returns nothing
endfunction

//攻击线程
//AI编辑器导出AI脚本的功能
function AttackAssignment takes nothing returns nothing
endfunction


//设置攻击组
//往攻击组添加单位类型及数量
//冰封王座AI脚本的功能
function setup_force takes nothing returns nothing
endfunction


//攻击组攻击目标坐标
//部分官方战役AI脚本的功能
function attack_move takes integer dx, integer dy returns nothing
endfunction

//攻击组回家
//部分官方战役AI脚本的功能
function send_captain_home takes nothing returns nothing
endfunction

//设置攻击间隔
//部分官方战役AI脚本的功能
function set_attack_rate takes nothing returns nothing
endfunction

//获取下次进攻点
//冰封王座争夺界碑
//部分官方战役AI脚本的功能
function pick_next_slot takes nothing returns nothing
endfunction

//伊利丹数量统计，会统计变形前后的伊利丹，以判断英雄是否存活
//部分官方战役AI脚本的功能
function Illidan_count takes boolean onlyDone returns integer
endfunction

//伊利丹攻击
//部分官方战役AI脚本的功能
function Illidan_attack takes boolean normal_attack returns nothing
endfunction

//设置伊利丹攻击组序列
//部分官方战役AI脚本的功能
function set_Illidan_force takes nothing returns nothing
endfunction

//伊利丹攻击组攻击完成判断
//部分官方战役AI脚本的功能
function let_Illidan_die takes nothing returns nothing
endfunction

//伊利丹攻击组组建线程
//部分官方战役AI脚本的功能
function Illidan_force takes nothing returns nothing
endfunction

//组建攻击组，设置攻击模式，调用对战攻击循环
//简单难度在完成一轮调用后会等待60秒
//冰封王座AI脚本的功能
function attack_sequence takes nothing returns nothing

endfunction

//组建圣骑士攻击组
//官方演示AI脚本的功能
function paladin_assault takes nothing returns nothing
endfunction


//攻击序列
//官方演示AI脚本的功能
function assault_sequence takes nothing returns nothing
endfunction

//攻击线程
//官方演示AI脚本的功能
function assault_loop takes nothing returns nothing
endfunction

//下一波自杀攻击序列
//部分官方战役AI脚本的功能
function suicide_next takes nothing returns nothing
endfunction

//暴力攻击序列
//部分官方战役AI脚本的功能
function agro_wave takes nothing returns nothing
endfunction

//设置暴力攻击攻击组，默认仅在收到触发器命令的额外攻击后运行
//部分官方战役AI脚本的功能
function go_agro takes nothing returns nothing
endfunction

//暴力攻击线程，默认用于触发器命令的额外攻击
//部分官方战役AI脚本的功能
function agro_loop takes nothing returns nothing
endfunction

//攻击序列
//部分官方战役AI脚本的功能
function assault_wave takes nothing returns nothing
endfunction


//攻击线程
//部分官方战役AI脚本的功能
function wave_loop takes nothing returns nothing
endfunction
//--------------------------------------------------------------------------------------------------
//  force_level
//--------------------------------------------------------------------------------------------------

//设置等级（计算当前兵力强度）
//冰封王座AI脚本的功能
function force_level takes nothing returns integer

endfunction



//--------------------------------------------------------------------------------------------------
//  init_vars
//--------------------------------------------------------------------------------------------------

//刷新条件，重新判断所有预设条件
//AI编辑器导出AI脚本的功能
function UpdateConditions takes nothing returns nothing
endfunction


//刷新条件，重新判断所有预设条件
//混乱之治AI脚本的功能
function init_booleans takes nothing returns nothing
endfunction

//刷新变量，重新统计所有变量（各兵种、建筑数量）
//冰封王座AI脚本的功能
function init_vars takes nothing returns nothing
endfunction

//刷新变量，重新统计存活玩家及是否可对其进行暴力攻击
//部分官方战役AI脚本的功能
function init_arrays takes nothing returns nothing
endfunction

//刷新界碑控制者
//冰封王座争夺界碑
//部分官方战役AI脚本的功能
function slots_controlled takes integer who returns integer
endfunction

//--------------------------------------------------------------------------------------------------
//  set_vars
//--------------------------------------------------------------------------------------------------


//设置变量线程
//亡灵在此计算采木和攻击食尸鬼数量
//冰封王座AI脚本的功能
function set_vars takes nothing returns nothing

endfunction


//--------------------------------------------------------------------------------------------------
//  do_upgrades
//--------------------------------------------------------------------------------------------------

//升级科技序列
//混乱之治AI脚本的功能
function upgrade_sequence takes nothing returns nothing
endfunction

//升级科技线程
//冰封王座AI脚本的功能
function do_upgrades takes nothing returns nothing
endfunction

//升级科技序列
//官方演示AI脚本的功能
function set_upgrade takes integer level, integer upgid returns boolean
endfunction

//升级科技序列
//部分官方战役AI脚本的功能
function more_upgrades takes nothing returns nothing
endfunction

//--------------------------------------------------------------------------------------------------
//  build_sequence
//--------------------------------------------------------------------------------------------------


//训练/建造序列
//建造顺序按AI编辑器设置
//AI编辑器导出AI脚本的功能
function BuildPriorities takes nothing returns nothing
endfunction

//核心攻击单位动态训练序列
//根据当前单位的数量及人口情况，调整核心攻击单位的训练数量
//混乱之治AI脚本的功能
function forces_sequence takes nothing returns nothing
endfunction

//远程单位动态训练序列
//根据当前单位的数量及人口情况，调整远程单位单位的训练数量
//混乱之治AI脚本的功能
function build_ranged takes integer pool returns nothing
endfunction

//基础近战单位动态训练序列
//根据当前单位的数量及人口情况，调整近战攻击单位的训练数量
//混乱之治AI脚本的功能
function basic_melee takes integer food returns nothing
endfunction

//基础远程单位训练序列
//根据当前单位的数量及人口情况，调整远程单位单位的训练数量
//混乱之治AI脚本的功能
function basic_ranged takes integer food returns nothing
endfunction

//建造分矿序列（亡灵独占）
//混乱之治AI脚本的功能
function undead_mine takes integer townid returns nothing
endfunction


//训练/建造线程
//同时控制基础模式
//兽族这里没写训练三英雄的代码，导致不出三英雄
//冰封王座AI脚本的功能
function build_sequence takes nothing returns nothing

endfunction

//添加建造队列的单位类型到建造数组
//官方演示AI脚本的功能
function set_build takes integer qty, integer id returns nothing
endfunction


//添加建造队列的科技类型到建造数组
//官方演示AI脚本的功能
function set_upgrd takes integer qty, integer id returns nothing
endfunction

//获取圣骑士
//不确定该函数是否能过自检，没看到底层API，也没有对应功能，但演示AI脚本有调用
//官方演示AI脚本的功能
function AcquireStones takes integer qty, integer id returns nothing
endfunction

//训练圣骑士序列
//官方演示AI脚本的功能
function paladin_sequence takes nothing returns nothing
endfunction

//判断工人数量，设置训练
//官方演示AI脚本的功能
function set_start takes integer ask_qty, integer unitid returns boolean
endfunction

//训练工人序列
//官方演示AI脚本的功能
function set_start_peons takes integer max returns boolean
endfunction

//获取科技指数
//不确定该函数是否能过自检，没看到底层API，也没有对应功能，但演示AI脚本有调用
//官方演示AI脚本的功能
function GetStones takes nothing returns nothing
endfunction

//获取AI金矿是否被采集
//不确定该函数是否能过自检，没看到底层API，也没有对应功能，但演示AI脚本有调用
//官方演示AI脚本的功能
function GetAiMineBusy takes nothing returns nothing
endfunction

//建造序列
//官方演示AI脚本的功能
function run_build_sequence takes nothing returns boolean
endfunction


//建造序列
//官方演示AI脚本的功能
function set_build_units takes boolean fplayer returns nothing
endfunction

//建造线程
//官方演示AI脚本的功能
function build_loop takes nothing returns nothing
endfunction

//建造/训练单位并进行自杀式攻击
//部分官方战役AI脚本的功能
function after_sword takes nothing returns nothing
endfunction

//测试建造/训练单位，当触发器有命令传来时测试成功
//部分官方战役AI脚本的功能
function test_sword takes nothing returns nothing
endfunction

//建造/训练一个单位
//部分官方战役AI脚本的功能
function send_one takes integer unitid, integer seconds returns nothing
endfunction

//批量建造/训练单位
//部分官方战役AI脚本的功能
function send_group takes integer qty, integer unitid returns nothing
endfunction


//建造序列
//部分官方战役AI脚本的功能
function send takes integer unitid, integer seconds returns nothing
endfunction

//计时建造线程，1号玩家，简单及普通（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate1_normal takes nothing returns nothing
endfunction

//计时建造线程，2号玩家，简单及普通（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate2_normal takes nothing returns nothing
endfunction

//计时建造线程，3号玩家，简单及普通（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate3_normal takes nothing returns nothing
endfunction

//计时建造线程，4号玩家，简单及普通（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate4_normal takes nothing returns nothing
endfunction


//计时建造线程，1号玩家，困难（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate1_hard takes nothing returns nothing
endfunction

//计时建造线程，2号玩家，困难（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate2_hard takes nothing returns nothing
endfunction

//计时建造线程，3号玩家，困难（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate3_hard takes nothing returns nothing
endfunction

//计时建造线程，4号玩家，困难（与进入战役时选的难度挂钩）
//每等待一段时间造几个单位
//部分官方战役AI脚本的功能
function gate4_hard takes nothing returns nothing
endfunction

//命令建造线程，根据获取的触发器命令进行建造/训练
//部分官方战役AI脚本的功能
function command_loop takes nothing returns nothing
endfunction

//重造建筑单位线程
//部分官方战役AI脚本的功能
function rebuild_town takes nothing returns nothing
endfunction

//升级塔序列
//部分官方战役AI脚本的功能
function upgrade_towers takes nothing returns nothing
endfunction

//--------------------------------------------------------------------------------------------------
//  peon_assignment
//--------------------------------------------------------------------------------------------------

//工人采集序列，控制各基地采矿及采木工人数量
//官方演示AI脚本的功能
function peon_assignments takes nothing returns nothing
endfunction

//工人采集序列，控制各基地采矿及采木工人数量
//采集安排按AI编辑器设置
//AI编辑器导出AI脚本的功能
function HarvestPriorities takes nothing returns nothing
endfunction

//工人采集线程（亡灵独占）
//混乱之治AI脚本的功能
function harvest_gold takes integer townid returns nothing
endfunction


//工人采集线程，控制各基地采矿及采木工人数量
//冰封王座AI脚本的功能
function peon_assignment takes nothing returns nothing

endfunction

//工人采集及建造线程
//不断循环，循环调用训练/建造序列和工人采集序列
//AI编辑器导出AI脚本的功能
function WorkerAssignment takes nothing returns nothing
endfunction


//食尸鬼采集线程
//部分官方战役AI脚本的功能
function set_wood_ghouls takes nothing returns nothing
endfunction

//--------------------------------------------------------------------------------------------------
//	main
//--------------------------------------------------------------------------------------------------

//初始化设置（只运行一次），开局时按AI编辑器设置初始化各选项状态
//AI编辑器导出AI脚本的功能
function InitOptions takes nothing returns nothing
endfunction

//主程序（只运行一次），开局时运行，拉起各线程
//可用于参数赋值，如设置AI名字、设置各选项等
function main takes nothing returns nothing

endfunction
